<?php
session_start();
require 'config.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit;
}

$user_id = $_SESSION['user_id'];

/* ๐ท Step 1: Get all ratings */
$ratingsQuery = "SELECT user_id, book_id, rating FROM ratings";
$ratingsResult = mysqli_query($conn, $ratingsQuery);

$userRatings = [];
while ($row = mysqli_fetch_assoc($ratingsResult)) {
    $userRatings[$row['user_id']][$row['book_id']] = $row['rating'];
}

/* ๐ท Step 1.5: Add implicit ratings from favorites (5), reminders (3), user_reads (4) */

// Favorites
$fav_stmt = $conn->prepare("SELECT user_id, book_id FROM favorites");
$fav_stmt->execute();
$fav_result = $fav_stmt->get_result();
while ($row = $fav_result->fetch_assoc()) {
    $uid = $row['user_id'];
    $bid = $row['book_id'];
    if (!isset($userRatings[$uid][$bid])) {
        $userRatings[$uid][$bid] = 5;
    }
}

// Reminders
$rem_stmt = $conn->prepare("SELECT user_id, book_id FROM reminders");
$rem_stmt->execute();
$rem_result = $rem_stmt->get_result();
while ($row = $rem_result->fetch_assoc()) {
    $uid = $row['user_id'];
    $bid = $row['book_id'];
    if (!isset($userRatings[$uid][$bid])) {
        $userRatings[$uid][$bid] = 3;
    }
}

// User Reads
$read_stmt = $conn->prepare("SELECT user_id, book_id FROM user_reads");
$read_stmt->execute();
$read_result = $read_stmt->get_result();
while ($row = $read_result->fetch_assoc()) {
    $uid = $row['user_id'];
    $bid = $row['book_id'];
    if (!isset($userRatings[$uid][$bid])) {
        $userRatings[$uid][$bid] = 4;
    }
}

/* ๐ท Step 2: Cosine Similarity Collaborative */
function cosineSimilarity($vecA, $vecB) {
    $dotProduct = 0;
    $normA = 0;
    $normB = 0;
    $allKeys = array_unique(array_merge(array_keys($vecA), array_keys($vecB)));
    foreach ($allKeys as $key) {
        $a = $vecA[$key] ?? 0;
        $b = $vecB[$key] ?? 0;
        $dotProduct += $a * $b;
        $normA += $a * $a;
        $normB += $b * $b;
    }
    return ($normA && $normB) ? $dotProduct / (sqrt($normA) * sqrt($normB)) : 0;
}

$similarities = [];
foreach ($userRatings as $otherUserId => $ratings) {
    if ($otherUserId == $user_id) continue;
    $sim = cosineSimilarity($userRatings[$user_id] ?? [], $ratings);
    if ($sim > 0) {
        $similarities[$otherUserId] = $sim;
    }
}
arsort($similarities);
$topUsers = array_slice($similarities, 0, 5, true);

/* ๐ท Step 3: Build liked categories from all sources */
$likedCategories = [];
$userRatedBookIds = array_keys($userRatings[$user_id] ?? []);

// Ratings
if (!empty($userRatedBookIds)) {
    $idList = implode(',', array_map('intval', $userRatedBookIds));
    $query = "SELECT id, category FROM books WHERE id IN ($idList)";
    $res = mysqli_query($conn, $query);
    while ($row = mysqli_fetch_assoc($res)) {
        $cat = $row['category'];
        $score = $userRatings[$user_id][$row['id']];
        $likedCategories[$cat] = ($likedCategories[$cat] ?? 0) + $score;
    }
}

// Favorites
$fav_stmt = $conn->prepare("SELECT book_id FROM favorites WHERE user_id = ?");
$fav_stmt->bind_param("i", $user_id);
$fav_stmt->execute();
$fav_result = $fav_stmt->get_result();
while ($row = $fav_result->fetch_assoc()) {
    $bookId = $row['book_id'];
    $q = mysqli_prepare($conn, "SELECT category FROM books WHERE id = ?");
    mysqli_stmt_bind_param($q, "i", $bookId);
    mysqli_stmt_execute($q);
    $result = mysqli_stmt_get_result($q);
    $bookRow = mysqli_fetch_assoc($result);
    if ($bookRow) {
        $cat = $bookRow['category'];
        $likedCategories[$cat] = ($likedCategories[$cat] ?? 0) + 5;
    }
}

// Reminders
$rem_stmt = $conn->prepare("SELECT book_id FROM reminders WHERE user_id = ?");
$rem_stmt->bind_param("i", $user_id);
$rem_stmt->execute();
$rem_result = $rem_stmt->get_result();
while ($row = $rem_result->fetch_assoc()) {
    $bookId = $row['book_id'];
    $q = mysqli_prepare($conn, "SELECT category FROM books WHERE id = ?");
    mysqli_stmt_bind_param($q, "i", $bookId);
    mysqli_stmt_execute($q);
    $result = mysqli_stmt_get_result($q);
    $bookRow = mysqli_fetch_assoc($result);
    if ($bookRow) {
        $cat = $bookRow['category'];
        $likedCategories[$cat] = ($likedCategories[$cat] ?? 0) + 3;
    }
}

// User Reads
$read_stmt = $conn->prepare("SELECT book_id FROM user_reads WHERE user_id = ?");
$read_stmt->bind_param("i", $user_id);
$read_stmt->execute();
$read_result = $read_stmt->get_result();
while ($row = $read_result->fetch_assoc()) {
    $bookId = $row['book_id'];
    $q = mysqli_prepare($conn, "SELECT category FROM books WHERE id = ?");
    mysqli_stmt_bind_param($q, "i", $bookId);
    mysqli_stmt_execute($q);
    $result = mysqli_stmt_get_result($q);
    $bookRow = mysqli_fetch_assoc($result);
    if ($bookRow) {
        $cat = $bookRow['category'];
        $likedCategories[$cat] = ($likedCategories[$cat] ?? 0) + 4;
    }
}

/* ๐ท Step 4: Collaborative recommendations with Content-Based weighting */
$recommendedBooks = [];
foreach ($topUsers as $otherUserId => $similarity) {
    foreach ($userRatings[$otherUserId] as $bookId => $rating) {
        if (isset($userRatings[$user_id][$bookId])) continue;

        $q = mysqli_prepare($conn, "SELECT category FROM books WHERE id = ?");
        mysqli_stmt_bind_param($q, "i", $bookId);
        mysqli_stmt_execute($q);
        $result = mysqli_stmt_get_result($q);
        $row = mysqli_fetch_assoc($result);
        $category = $row ? $row['category'] : null;

        $catWeight = isset($likedCategories[$category]) ? 1 : 0.3;

        if (!isset($recommendedBooks[$bookId])) {
            $recommendedBooks[$bookId] = ['score' => 0, 'weight' => 0, 'count' => 0];
        }
        $recommendedBooks[$bookId]['score'] += $rating * $similarity * $catWeight;
        $recommendedBooks[$bookId]['weight'] += abs($similarity * $catWeight);
        $recommendedBooks[$bookId]['count'] += 1;
    }
}

/* ๐ท Step 5: Add pure content-based books */
if (!empty($likedCategories)) {
    $likedCats = array_keys($likedCategories);
    $placeholders = implode(',', array_fill(0, count($likedCats), '?'));
    $types = str_repeat('s', count($likedCats));

    $stmt = $conn->prepare("SELECT * FROM books WHERE category IN ($placeholders)");
    $stmt->bind_param($types, ...$likedCats);
    $stmt->execute();
    $res = $stmt->get_result();
    while ($row = $res->fetch_assoc()) {
        if (!isset($userRatings[$user_id][$row['id']]) && !isset($recommendedBooks[$row['id']])) {
            $recommendedBooks[$row['id']] = [
                'score' => $likedCategories[$row['category']] ?? 1,
                'weight' => 1,
                'count' => 1
            ];
        }
    }
}

/* ๐ท Step 6: Compute final scores */
$finalScores = [];
foreach ($recommendedBooks as $bookId => $data) {
    if ($data['weight'] > 0) {
        $finalScores[$bookId] = $data['score'] / $data['weight'];
    }
}
arsort($finalScores);

/* ๐ท Step 7: Fetch book details */
$bookDetails = [];
$bookIds = array_keys($finalScores);
if (!empty($bookIds)) {
    $idList = implode(',', array_map('intval', $bookIds));
    $query = "SELECT * FROM books WHERE id IN ($idList)";
    $res = mysqli_query($conn, $query);
    while ($row = mysqli_fetch_assoc($res)) {
        $bookDetails[$row['id']] = $row;
    }
}

/* ๐ท Step 8: Get favorites for heart icons */
$fav_stmt = $conn->prepare("SELECT book_id FROM favorites WHERE user_id = ?");
$fav_stmt->bind_param("i", $user_id);
$fav_stmt->execute();
$fav_result = $fav_stmt->get_result();
$favorites = [];
while ($row = $fav_result->fetch_assoc()) {
    $favorites[] = $row['book_id'];
}
?>
<!DOCTYPE html><html lang="ar">
<head>
    <meta charset="UTF-8">
    <title>ุชูุตูุงุช</title>
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<link rel="stylesheet" href="style/stylereco.css">
</head>
<body>
  <?php require 'nav.php'; ?>
  
 <header class="welcome-header">
  <div class="welcome-content">
    <div class="welcome-text">
      <h1> ูุฑุญุจูุง ุจู ูู <span>ูุชุงูุฉ</span></h1>
      <p>ูู ูุชุงูุฉุ ูุง ุชุจุญุซ ุนู ุงููุชุงุจ...
ุจู ุฏุน ุงููุชุงูุฉ ุชูุฑุดุฏู ุฅูู ูุง ููุดุจูู.

ููุฑุงูุจ ุงุฎุชูุงุฑุงุชูุ ููุฑุฃ ุฐูููุ
ุซู ููุชุญ ูู ุจุงุจูุง ูู ูุฎุทุฑ ุจุจุงูู...

ุฑูุงูุฉ ุชุดุจู ูููู.
ููุฑุฉ ุชูุดุจู ููุจู.
ููุชุงุจ ููุชุธุฑู ุฎูู ููุนุทูู ูุง.</p>
    
    </div>
    <img src="img/science-fiction.png" alt="ูุฑุญุจูุง" class="welcome-icon">
  </div>
</header>


<script>
const menuToggle = document.querySelector('.menu-toggle');
const navLinks = document.querySelector('.nav-links');

menuToggle.addEventListener('click', () => {
  navLinks.classList.toggle('active');
});
</script>

<?php if (empty($finalScores)): ?>
    <p>๐ ูุง ุชูุฌุฏ ุชูุตูุงุช ุญุงููุงู. ูู ุจุชูููู ุงููุฒูุฏ ูู ุงููุชุจ!</p>
<?php else: ?>
<div class="book-grid">
    <?php foreach ($finalScores as $bookId => $score): ?>
        <?php if (isset($bookDetails[$bookId])): $book = $bookDetails[$bookId]; ?>
            <div class="book">
                 <form method="post" action="toggle_favorite.php" class="favorite-form">
          <input type="hidden" name="book_id" value="<?= $book['id'] ?>">
          <button type="submit">
            <i class="fa<?= in_array($book['id'], $favorites) ? 's' : 'r' ?> fa-heart" style="color: <?= in_array($book['id'], $favorites) ? 'red' : '#bbb' ?>;"></i>
          </button>
        </form>
                 <?php if (!empty($book['cover_image'])): ?>
      <img src="<?= htmlspecialchars($book['cover_image']) ?>" alt="ุบูุงู ุงููุชุงุจ">
    <?php else: ?>
      <img src="default_cover.jpg" alt="ุบูุงู ุงูุชุฑุงุถู">
    <?php endif; ?>
                <h4><?= htmlspecialchars($book['title']) ?></h4>
                <p><?= nl2br(substr($book['description'], 0, 150)) ?>...</p>
                <p>โญ ุงูุชูุตูุฉ: <?= number_format($score, 2) ?>/5</p>
                <a href="<?= htmlspecialchars($book['file_path']) ?>" target="_blank">๐ ูุฑุงุกุฉ</a>
            </div>
        <?php endif; ?>
    <?php endforeach; ?></div>
<?php endif; ?>

  <script>
document.querySelectorAll('.favorite-form').forEach(form => {
    form.addEventListener('submit', function(e) {
        e.preventDefault(); // ูุง ูุฎููุด ูุนุงูุฏ ุชุญููู ุงูุตูุญุฉ

        const formData = new FormData(form);
        const heartIcon = form.querySelector('i');

        fetch('toggle_favorite.php', {
            method: 'POST',
            body: formData
        })
        .then(res => res.json())
        .then(data => {
            if (data.status === 'added') {
                heartIcon.classList.remove('far'); // fa-regular
                heartIcon.classList.add('fas');    // fa-solid
                heartIcon.style.color = 'red';
            } else if (data.status === 'removed') {
                heartIcon.classList.remove('fas');
                heartIcon.classList.add('far');
                heartIcon.style.color = '#bbb';
            }
        })
        .catch(err => {
            console.error('ุฎุทุฃ ูู AJAX:', err);
        });
    });
});
</script>
 <?php  require 'reminder.php' ?>
</body>
</html>